From fa1af00ae00119d6bcb77334647008205e05a9d1 Mon Sep 17 00:00:00 2001
From: Anand Je Sypureddy <anandje@mvista.com>
Date: Thu, 13 Aug 2020 12:23:51 +0530
Subject: [PATCH 4/6] changeset 49780:3b7859b3ef15

8193414: Improvements in MethodType lookups

Upstream Status: Backport http://hg.openjdk.java.net/jdk/jdk/rev/3b7859b3ef15
CVE: CVE-2020-2805 patch #1

Reviewed-by: ahgross, jrose
Signed-off-by: Anand Je Sypureddy <anandje@mvista.com>
---
 .../classes/java/lang/invoke/MethodType.java  | 28 ++++++++-----------
 1 file changed, 12 insertions(+), 16 deletions(-)

diff --git a/jdk/src/share/classes/java/lang/invoke/MethodType.java b/jdk/src/share/classes/java/lang/invoke/MethodType.java
index c1b98485..16f9943b 100644
--- a/jdk/src/share/classes/java/lang/invoke/MethodType.java
+++ b/jdk/src/share/classes/java/lang/invoke/MethodType.java
@@ -1140,33 +1140,24 @@ s.writeObject(this.parameterArray());
      * @param s the stream to read the object from
      * @throws java.io.IOException if there is a problem reading the object
      * @throws ClassNotFoundException if one of the component classes cannot be resolved
-     * @see #MethodType()
      * @see #readResolve
      * @see #writeObject
      */
     private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
+        // Assign temporary defaults in case this object escapes
+        MethodType_init(void.class, NO_PTYPES);
+
         s.defaultReadObject();  // requires serialPersistentFields to be an empty array
 
         Class<?>   returnType     = (Class<?>)   s.readObject();
         Class<?>[] parameterArray = (Class<?>[]) s.readObject();
-
-        // Probably this object will never escape, but let's check
-        // the field values now, just to be sure.
-        checkRtype(returnType);
-        checkPtypes(parameterArray);
-
         parameterArray = parameterArray.clone();  // make sure it is unshared
+
+        // Assign deserialized values
         MethodType_init(returnType, parameterArray);
     }
 
-    /**
-     * For serialization only.
-     * Sets the final fields to null, pending {@code Unsafe.putObject}.
-     */
-    private MethodType() {
-        this.rtype = null;
-        this.ptypes = null;
-    }
+    // Initialization of state for deserialization only
     private void MethodType_init(Class<?> rtype, Class<?>[] ptypes) {
         // In order to communicate these values to readResolve, we must
         // store them into the implementation-specific final fields.
@@ -1198,7 +1189,12 @@ s.writeObject(this.parameterArray());
         // Do not use a trusted path for deserialization:
         //return makeImpl(rtype, ptypes, true);
         // Verify all operands, and make sure ptypes is unshared:
-        return methodType(rtype, ptypes);
+        try {
+            return methodType(rtype, ptypes);
+        } finally {
+            // Re-assign defaults in case this object escapes
+            MethodType_init(void.class, NO_PTYPES);
+        }
     }
 
     /**
-- 
2.28.0

